' activity diagram
@startuml
start
:ClickServlet.handleRequest();
:new page;
if (Page.onSecurityCheck) then (true)
  :Page.onInit();
  if (isForward?) then (no)
    :Process controls;
    if (continue processing?) then (no)
      stop
    endif
    
    if (isPost?) then (yes)
      :Page.onPost();
    else (no)
      :Page.onGet();
    endif
    :Page.onRender();
  endif
else (false)
endif

if (do redirect?) then (yes)
  :redirect process;
else
  if (do forward?) then (yes)
    :Forward request;
  else (no)
    :Render page template;
  endif
endif

stop
@enduml

' sequence diagram
@startuml
hide footbox
participant Foo
actor Foo1
boundary Foo2

box "controller" #LightGreen
    control Foo3
    entity Foo4
    database Foo5
end box

Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
@enduml

' class diagram
@startuml
!define table(x) class x << (T,#FFAAAA) >>
!define primary_key(x) <u>x</u>
hide methods

package event #FFFFFF {
    class Base {
    }

    package trigger #FFFFFF {
        class Queue {
            #q_
            +put_q()
            +join_q()
        }
    }
    package handler #FFFFFF {
        class Thread {
            #thread_
            +start()
            +stop()
            +join()
            #thread_main()
            #is_condition()
            #run_in_condition()
        }
    }

    Base <|-- Queue
    Base <|-- Thread
}

table(geo) {
    primary_key(ix)
    longitude
    latitude
}

scale 800 width
Class01 <|-- Class02
Class03 *-- Class04
Class05 o-- Class06
Class07 .. Class08
Class09 -- Class10
Class11 <|.. Class12
Class13 --> Class14
Class15 ..> Class16
Class17 ..|> Class18
Class19 <--* Class20
@enduml

' activity diagram
@startuml

(*) --> "First Activity"
"First Activity" --> (*)

@enduml
